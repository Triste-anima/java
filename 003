01

public class CircleWithException {
	public double radius;
	public static int numberOfObject = 0;
	
	public CircleWithException(double r)
	{
		setRadius(r);
		numberOfObject++;
	}
	
	public double getRadius()
	{
		return radius;
	}
	
	public void setRadius(double r) throws IllegalArgumentException
	{
		if(r <= 0)
			throw new IllegalArgumentException("Radius cannot be negative");
		radius = r;
	}
	
	
	public static int getNumberOfObjects()
	{
		return numberOfObject;
	}
	
	public double getArea()
	{
		return Math.PI * radius * radius;
	}
}





02

public interface Movable {
	public void moveUp();
	public void moveDown();
	public void moveLeft();
	public void moveRight();
}





public class MovablePoint implements Movable{
	public int x, y;
	public int xSpeed, ySpeed;
	
	// Constructor
    public MovablePoint(int x, int y, int xSpeed, int ySpeed) {
        this.x = x;
        this.y = y;
        this.xSpeed = xSpeed;
        this.ySpeed = ySpeed;
    }

    // Implement abstract methods declared in the interface Movable
    public void moveUp() {
        y += ySpeed; // y-axis pointing down for 2D graphics
    }
    
    public void moveDown() {
        y -= ySpeed; // y-axis pointing down for 2D graphics
    }
    
    public void moveRight() {
        x += xSpeed; // y-axis pointing down for 2D graphics
    }
    
    public void moveLeft() {
        x -= xSpeed; // y-axis pointing down for 2D graphics
    }
    
    public String toString()
    {
    	String result = "MovablePoint (" + x + ", " + y + ") with xSpeed = " + xSpeed + " and ySpeed = " + ySpeed;
    	return result;
    }
}





public class MovableCircle implements Movable { // saved as "MovableCircle.java"
    // instance variables
    private MovablePoint center; // can use center.x, center.y directly
    // because they are package accessible
    private int radius;

    // Constructor
    public MovableCircle(int x, int y, int xSpeed, int ySpeed, int radius) {
        // Call the MovablePoint's constructor to allocate the center instance.
        center = new MovablePoint(x, y, xSpeed, ySpeed);
        this.radius = radius;
    }
    
    // Implement abstract methods declared in the interface Movable
    public void moveUp() {
        center.y += center.ySpeed;
    }
    
    public void moveDown() {
        center.y -= center.ySpeed;
    }
    
    public void moveRight() {
        center.x += center.xSpeed;
    }
    
    public void moveLeft() {
        center.x -= center.xSpeed;
    }
    
    public String toString()
    {
    	String result = "MovableCircle at point MovablePoint (" + center.x + ", " + center.y + ") with xSpeed = " + center.xSpeed + " and ySpeed = " + center.ySpeed + " with radius = " + radius;
    	return result;
    }

}

